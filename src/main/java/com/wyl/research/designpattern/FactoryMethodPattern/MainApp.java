package com.wyl.research.designpattern.FactoryMethodPattern;

/**
 * @Description: TODO
 * @auther: wuyunlong
 * @date: 2020/5/18
 */
public class MainApp {

    /**
     * @Description: 工厂方法模式==>创建型模式==>一个工厂实例创建一个具体的产品
     * @Date: 2020/5/18 1:59
     * @Idea: 基于工厂角色和产品角色的多态性设计是工厂方法模式的关键, 使用工厂方法模式的另一个优点是在系统中加入新产品时，
     * 无须修改抽象工厂和抽象产品提供的接口，并且也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品,客户端也只要修改创建的具体工厂就可以了。
     * 这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。
     * <p>
     * 相比简单工厂来说,无需修改工厂类创建产品的逻辑,新增产品只要创建和选择对应的工厂类即可,对其他的具体工厂不影响,符合开闭原则;
     * <p>
     * 缺点是:实现难度高,类成对增加;
     * <p>
     * 使用场景:JDBC中的工厂方法
     * <p>
     * 工厂方法模式又称为工厂模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。
     * 工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。
     * 工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。
     * 工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。
     * 工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。
     */
    public static void main(String[] args) {

        ProductFactory productFactory = new ProductFactoryImplA();
        Product product = productFactory.getProduct();
        product.use();


    }
}
