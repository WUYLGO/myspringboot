package com.wyl.research.designpattern.simpelFactoryPattern;

/**
 * @Description: TODO
 * @auther: wuyunlong
 * @date: 2020/5/18
 */
public class MainApp {
    /**
     * @Description: 简单工厂模式==>创建型模式(https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html#id10)
     * @Date: 2020/5/18 1:24
     * @Idea: 将对象的创建交给工厂, 后期增加需求的时候只要定义新的产品实现product接口, 然后只要根据不同的参数即可实现正确的产品对象创建,客户端无需知道具体的产品类名,
     * 只要知道正确的参数即可;客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品;
     * <p>
     * 缺点:系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。
     * <p>
     * 适用环境:工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。
     * 客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。
     * <p>f
     * 例子:Java加密技术==>获取不同加密算法的密钥生成器:==>KeyGenerator keyGen=KeyGenerator.getInstance("DESede");
     * <p>
     * <p>
     * <p>
     * 创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。
     * 简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。
     * 简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。
     * 简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。
     * 简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。
     * 简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。
     */
    public static void main(String[] args) {

//        Product product = SimpleFactory.getProduct(1);
        Product product = SimpleFactory.getProduct(0);
        product.use();

    }
}
